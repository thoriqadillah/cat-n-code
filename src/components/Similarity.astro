---
import Button from "./Button.astro";
---

<div class="mb-2 flex">
  <div class="mr-5">
    <label for="method" class="text-bright font-bold mr-3">Method</label>
    <select name="method" id="method" class="prose dark:prose-invert bg-dark p-2 rounded-md">
      <option selected value="1">Cosine Similarity</option>
      <option value="2">Cosine Similarity + LSA</option>
    </select>
  </div>

  <div>
    <label for="lang" class="text-bright font-bold mr-3">Language</label>
    <select name="lang" id="lang" class="prose dark:prose-invert bg-dark p-2 rounded-md">
      <option selected value="none">None</option>
      <option value="en">English</option>
      <option value="id">Indonesia</option>
    </select>
  </div>

</div>

<div class="flex flex-col md:flex-row">
  <textarea class="prose dark:prose-invert docs bg-dark rounded-md w-full p-3 mb-2 md:mr-2 h-48" placeholder="Write something"/>
  <textarea class="prose dark:prose-invert docs bg-dark rounded-md w-full p-3 mb-1 h-48" placeholder="Write something else"/>
</div>

<button class="calculate px-5 py-2 font-bold bg-dark hover:bg-darker text-white rounded-md">CALCULATE</button>
<p id="result" class="text-second inline p-2 font-bold ml-auto"></p>

<script>
  import Preprocessing from '../services/preprocessing'
  import CosineSimilarity from '../services/cosine-similarity'

  import Matrix from 'src/services/transformers/matrix'
  import LSA from 'src/services/transformers/LSA'
  
  const cossim = new CosineSimilarity()

  const inputs = document.querySelectorAll('.docs') as NodeListOf<HTMLInputElement>
  const btn = document.querySelector('.calculate') as HTMLElement
  const p = document.querySelector('#result') as HTMLElement
  const lang = document.querySelector('#lang') as HTMLInputElement
  const method = document.querySelector('#method') as HTMLInputElement
  
  btn.onclick = () => {  
    const documents: string[] = []
    inputs.forEach(el => documents.push(el.value))
    
    let vectors = Preprocessing.preprocess(documents, lang.value)
    
    if (method.value == '2') {
      const matrix = new Matrix(vectors);
      vectors = new LSA(matrix).transform()
    }
    
    const similarity = cossim.getSimilarity(vectors[0], vectors[1])
    p.innerHTML = 'Similarity: ' + Math.round(similarity).toString() + '%'
  }
</script>